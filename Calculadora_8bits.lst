CCS PCH C Compiler, Version 5.012, 41559               19-mar-17 22:32

               Filename:   C:\Users\lazaax\Documents\GitHub\Practica\Calculadora_8bits.lst

               ROM used:   304 bytes (0%)
                           Largest free fragment is 65232
               RAM used:   5 (0%) at main() level
                           12 (0%) worst case
               Stack used: 2 locations
               Stack size: 31

*
00000:  GOTO   007E
.................... #include <18F4620.h> 
.................... ///////////// Standard Header file for the PIC18F4620 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4620 
*
00054:  MOVF   0B,W
00056:  CLRF   01
00058:  SUBWF  0A,W
0005A:  BC    0062
0005C:  MOVFF  0A,00
00060:  BRA    007A
00062:  CLRF   00
00064:  MOVLW  08
00066:  MOVWF  0C
00068:  RLCF   0A,F
0006A:  RLCF   00,F
0006C:  MOVF   0B,W
0006E:  SUBWF  00,W
00070:  BTFSC  FD8.0
00072:  MOVWF  00
00074:  RLCF   01,F
00076:  DECFSZ 0C,F
00078:  BRA    0068
0007A:  GOTO   0124 (RETURN)
....................  
.................... #list 
....................  
.................... #fuses INTRC_IO, NOFCMEN, NOIESO, PUT, NOBROWNOUT, NOWDT 
.................... #fuses NOPBADEN, NOMCLR, STVREN, NOLVP, NODEBUG 
.................... #use delay(clock=32000000) 
*
00004:  CLRF   FEA
00006:  MOVLW  0C
00008:  MOVWF  FE9
0000A:  MOVF   FEF,W
0000C:  BZ    0028
0000E:  MOVLW  0A
00010:  MOVWF  01
00012:  CLRF   00
00014:  DECFSZ 00,F
00016:  BRA    0014
00018:  DECFSZ 01,F
0001A:  BRA    0012
0001C:  MOVLW  5F
0001E:  MOVWF  00
00020:  DECFSZ 00,F
00022:  BRA    0020
00024:  DECFSZ FEF,F
00026:  BRA    000E
00028:  GOTO   0044 (RETURN)
.................... #use standard_io(b) 
.................... #use standard_io(a) 
.................... #define retardo 500 
....................  
.................... void error(); 
....................  
.................... void main (void){ 
*
0007E:  CLRF   FF8
00080:  BCF    FD0.7
00082:  MOVLW  70
00084:  MOVWF  FD3
00086:  MOVLW  40
00088:  MOVWF  F9B
0008A:  MOVF   FD3,W
0008C:  MOVF   FC1,W
0008E:  ANDLW  C0
00090:  IORLW  0F
00092:  MOVWF  FC1
00094:  MOVLW  07
00096:  MOVWF  FB4
....................    set_tris_c(0b11111111); //habilito port como input 
00098:  MOVLW  FF
0009A:  MOVWF  F94
....................    set_tris_d(0b11111111); //habilito port como input 
0009C:  MOVWF  F95
....................    int16 resultado=0; 
....................    int8 operacion=0; 
....................    int8 operando1=0,operando2=0; 
0009E:  CLRF   06
000A0:  CLRF   05
000A2:  CLRF   07
000A4:  CLRF   08
000A6:  CLRF   09
....................    setup_oscillator(OSC_32MHZ); 
000A8:  MOVLW  70
000AA:  MOVWF  FD3
000AC:  MOVLW  40
000AE:  MOVWF  F9B
000B0:  MOVF   FD3,W
....................     
....................    while(True){ 
....................    operando1=input_c(); 
000B2:  SETF   F94
000B4:  MOVFF  F82,08
....................    operando2=input_d(); 
000B8:  SETF   F95
000BA:  MOVFF  F83,09
....................    operacion=input(PIN_B3); 
000BE:  BSF    F93.3
000C0:  CLRF   07
000C2:  BTFSC  F81.3
000C4:  INCF   07,F
....................    operacion=input(PIN_B4); 
000C6:  BSF    F93.4
000C8:  CLRF   07
000CA:  BTFSC  F81.4
000CC:  INCF   07,F
....................    operacion=input(PIN_B5); 
000CE:  BSF    F93.5
000D0:  CLRF   07
000D2:  BTFSC  F81.5
000D4:  INCF   07,F
....................    operacion=input(PIN_B6); 
000D6:  BSF    F93.6
000D8:  CLRF   07
000DA:  BTFSC  F81.6
000DC:  INCF   07,F
....................     
....................    //operando2=input_d(); 
....................    if(input(PIN_B3) == 1){ 
000DE:  BSF    F93.3
000E0:  BTFSS  F81.3
000E2:  BRA    00EC
....................    resultado = operando1 + operando2; 
000E4:  MOVF   09,W
000E6:  ADDWF  08,W
000E8:  MOVWF  05
000EA:  CLRF   06
....................        
....................    } 
....................    if(input(PIN_B4) == 1) 
000EC:  BSF    F93.4
000EE:  BTFSS  F81.4
000F0:  BRA    00FA
....................    { 
....................    resultado = operando1 - operando2; 
000F2:  MOVF   09,W
000F4:  SUBWF  08,W
000F6:  MOVWF  05
000F8:  CLRF   06
....................    } 
....................    if(input(PIN_B5) == 1) 
000FA:  BSF    F93.5
000FC:  BTFSS  F81.5
000FE:  BRA    010A
....................    { 
....................    resultado = operando1 * operando2; 
00100:  MOVF   08,W
00102:  MULWF  09
00104:  MOVF   FF3,W
00106:  CLRF   06
00108:  MOVWF  05
....................    } 
....................    if(input(PIN_B6) == 1) 
0010A:  BSF    F93.6
0010C:  BTFSS  F81.6
0010E:  BRA    012A
....................    { 
....................    if(input_d()==0) 
00110:  SETF   F95
00112:  MOVF   F83,F
00114:  BNZ   011A
....................    { 
....................    error(); 
00116:  BRA    002C
....................    break; 
00118:  BRA    012E
....................    } 
....................    resultado = operando1 / operando2; 
0011A:  MOVFF  08,0A
0011E:  MOVFF  09,0B
00122:  BRA    0054
00124:  CLRF   06
00126:  MOVFF  01,05
....................    } 
....................    operando1=0; 
0012A:  CLRF   08
0012C:  BRA    00B2
....................    } 
.................... }    
.................... void error() 
0012E:  SLEEP 
.................... { 
....................    int i; 
....................    for(i=0;i<5;i++) 
*
0002C:  CLRF   0A
0002E:  MOVF   0A,W
00030:  SUBLW  04
00032:  BNC   0050
....................    { 
....................    output_b(0b00000001); 
00034:  CLRF   F93
00036:  MOVLW  01
00038:  MOVWF  F8A
....................    delay_ms(retardo); 
0003A:  MOVLW  02
0003C:  MOVWF  0B
0003E:  MOVLW  FA
00040:  MOVWF  0C
00042:  BRA    0004
00044:  DECFSZ 0B,F
00046:  BRA    003E
....................    output_b(0b00000000); 
00048:  CLRF   F93
0004A:  CLRF   F8A
0004C:  INCF   0A,F
0004E:  BRA    002E
....................    } 
00050:  GOTO   012E (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 0800   INTRC_IO NOFCMEN NOIESO
   Word  2: 1E18   PUT NOBROWNOUT BORV21 NOWDT WDT32768
   Word  3: 0500   CCP2C1 NOPBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
