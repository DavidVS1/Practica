CCS PCH C Compiler, Version 5.012, 41559               25-mar-17 01:11

               Filename:   C:\Users\lazaax\Documents\GitHub\Practica\Calculadora_8bits.lst

               ROM used:   542 bytes (1%)
                           Largest free fragment is 64994
               RAM used:   6 (0%) at main() level
                           17 (0%) worst case
               Stack used: 2 locations
               Stack size: 31

*
00000:  GOTO   00E4
.................... #include <18F4620.h> 
.................... ///////////// Standard Header file for the PIC18F4620 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4620 
00004:  MOVF   0D,W
00006:  MULWF  0F
00008:  MOVFF  FF3,01
0000C:  MOVFF  FF4,00
00010:  MULWF  10
00012:  MOVF   FF3,W
00014:  ADDWF  00,F
00016:  MOVF   0E,W
00018:  MULWF  0F
0001A:  MOVF   FF3,W
0001C:  ADDWFC 00,W
0001E:  MOVWF  02
00020:  GOTO   019E (RETURN)
*
000A0:  CLRF   01
000A2:  CLRF   02
000A4:  CLRF   00
000A6:  CLRF   03
000A8:  MOVF   10,W
000AA:  BNZ   00B0
000AC:  MOVF   0F,W
000AE:  BZ    00E0
000B0:  MOVLW  10
000B2:  MOVWF  11
000B4:  BCF    FD8.0
000B6:  RLCF   0D,F
000B8:  RLCF   0E,F
000BA:  RLCF   00,F
000BC:  RLCF   03,F
000BE:  MOVF   10,W
000C0:  SUBWF  03,W
000C2:  BNZ   00C8
000C4:  MOVF   0F,W
000C6:  SUBWF  00,W
000C8:  BNC   00D8
000CA:  MOVF   0F,W
000CC:  SUBWF  00,F
000CE:  BTFSS  FD8.0
000D0:  DECF   03,F
000D2:  MOVF   10,W
000D4:  SUBWF  03,F
000D6:  BSF    FD8.0
000D8:  RLCF   01,F
000DA:  RLCF   02,F
000DC:  DECFSZ 11,F
000DE:  BRA    00B4
000E0:  GOTO   01CC (RETURN)
....................  
.................... #list 
....................  
.................... #fuses INTRC_IO, NOFCMEN, NOIESO, PUT, NOBROWNOUT, NOWDT 
.................... #fuses NOPBADEN, NOMCLR, STVREN, NOLVP, NODEBUG 
.................... #use delay(clock=32000000) 
*
00024:  CLRF   FEA
00026:  MOVLW  0F
00028:  MOVWF  FE9
0002A:  MOVF   FEF,W
0002C:  BZ    0048
0002E:  MOVLW  0A
00030:  MOVWF  01
00032:  CLRF   00
00034:  DECFSZ 00,F
00036:  BRA    0034
00038:  DECFSZ 01,F
0003A:  BRA    0032
0003C:  MOVLW  5F
0003E:  MOVWF  00
00040:  DECFSZ 00,F
00042:  BRA    0040
00044:  DECFSZ FEF,F
00046:  BRA    002E
00048:  RETURN 0
.................... #use standard_io(b) 
.................... #use standard_io(a) 
.................... #define retardo 500 
....................  
.................... void error(); 
....................  
.................... void main (void){ 
*
000E4:  CLRF   FF8
000E6:  BCF    FD0.7
000E8:  MOVLW  70
000EA:  MOVWF  FD3
000EC:  MOVLW  40
000EE:  MOVWF  F9B
000F0:  MOVF   FD3,W
000F2:  MOVF   FC1,W
000F4:  ANDLW  C0
000F6:  IORLW  0F
000F8:  MOVWF  FC1
000FA:  MOVLW  07
000FC:  MOVWF  FB4
....................    SETUP_ADC_PORTS(NO_ANALOGS);// para conversion a todos los puertos analogos a digitales 
000FE:  MOVF   FC1,W
00100:  ANDLW  C0
00102:  IORLW  0F
00104:  MOVWF  FC1
....................    setup_oscillator(OSC_32MHZ); 
00106:  MOVLW  70
00108:  MOVWF  FD3
0010A:  MOVLW  40
0010C:  MOVWF  F9B
0010E:  MOVF   FD3,W
....................    int1 valError=0; //variable de comprobacion de error 
....................    int16 operando1=0,operando2=0,resultado=0; //Variables operandos y resultados 
....................    int8 operacion=0; //variable para operaciones 
00110:  BCF    05.0
00112:  CLRF   07
00114:  CLRF   06
00116:  CLRF   09
00118:  CLRF   08
0011A:  CLRF   0B
0011C:  CLRF   0A
0011E:  CLRF   0C
....................    while(True){ 
....................    valError=0; 
00120:  BCF    05.0
....................    operando1=input_c(); 
00122:  SETF   F94
00124:  CLRF   07
00126:  MOVFF  F82,06
....................    operando2=input_d(); 
0012A:  SETF   F95
0012C:  CLRF   09
0012E:  MOVFF  F83,08
....................    if(input(PIN_B4)==1) operacion=1; //suma 
00132:  BSF    F93.4
00134:  BTFSS  F81.4
00136:  BRA    013E
00138:  MOVLW  01
0013A:  MOVWF  0C
0013C:  BRA    0160
....................    else if(input(PIN_B5)==1) operacion=2;//resta 
0013E:  BSF    F93.5
00140:  BTFSS  F81.5
00142:  BRA    014A
00144:  MOVLW  02
00146:  MOVWF  0C
00148:  BRA    0160
....................    else if(input(PIN_B6)==1) operacion=3;//multiplicacion 
0014A:  BSF    F93.6
0014C:  BTFSS  F81.6
0014E:  BRA    0156
00150:  MOVLW  03
00152:  MOVWF  0C
00154:  BRA    0160
....................    else if(input(PIN_B7)==1) operacion=4;//divicion 
00156:  BSF    F93.7
00158:  BTFSS  F81.7
0015A:  BRA    0160
0015C:  MOVLW  04
0015E:  MOVWF  0C
....................    if(operacion==1) resultado = operando1 + operando2; 
00160:  DECFSZ 0C,W
00162:  BRA    0172
00164:  MOVF   08,W
00166:  ADDWF  06,W
00168:  MOVWF  0A
0016A:  MOVF   09,W
0016C:  ADDWFC 07,W
0016E:  MOVWF  0B
00170:  BRA    01D4
....................    else if(operacion == 2) resultado = operando1 - operando2; 
00172:  MOVF   0C,W
00174:  SUBLW  02
00176:  BNZ   0186
00178:  MOVF   08,W
0017A:  SUBWF  06,W
0017C:  MOVWF  0A
0017E:  MOVF   09,W
00180:  SUBWFB 07,W
00182:  MOVWF  0B
00184:  BRA    01D4
....................    else if(operacion == 3) resultado = operando1 * operando2; 
00186:  MOVF   0C,W
00188:  SUBLW  03
0018A:  BNZ   01A8
0018C:  MOVFF  07,0E
00190:  MOVFF  06,0D
00194:  MOVFF  09,10
00198:  MOVFF  08,0F
0019C:  BRA    0004
0019E:  MOVFF  02,0B
001A2:  MOVFF  01,0A
001A6:  BRA    01D4
....................    else if(operacion == 4) 
001A8:  MOVF   0C,W
001AA:  SUBLW  04
001AC:  BNZ   01D4
....................    { 
....................    if(input_d()==0)//validacion de puerto d no este en 0 
001AE:  SETF   F95
001B0:  MOVF   F83,F
001B2:  BNZ   01BA
....................    { 
....................    valError=1; /*si esta en 0 valError cambia a 1, por lo tanto no entra 
001B4:  BSF    05.0
....................                mostrar desplazamiendo*/ 
....................    error(); //funcion de error  
001B6:  BRA    004A
....................    }else 
001B8:  BRA    01D4
....................    resultado = operando1 / operando2; 
001BA:  MOVFF  07,0E
001BE:  MOVFF  06,0D
001C2:  MOVFF  09,10
001C6:  MOVFF  08,0F
001CA:  BRA    00A0
001CC:  MOVFF  02,0B
001D0:  MOVFF  01,0A
....................    } 
....................    if(valError==0) 
001D4:  BTFSC  05.0
001D6:  BRA    021A
....................    { 
....................    output_a(resultado); 
001D8:  CLRF   F92
001DA:  MOVFF  0A,F89
....................    output_b(resultado>>6); 
001DE:  RRCF   0B,W
001E0:  MOVWF  0E
001E2:  RRCF   0A,W
001E4:  MOVWF  0D
001E6:  RRCF   0E,F
001E8:  RRCF   0D,F
001EA:  RRCF   0E,F
001EC:  RRCF   0D,F
001EE:  RRCF   0E,F
001F0:  RRCF   0D,F
001F2:  RRCF   0E,F
001F4:  RRCF   0D,F
001F6:  RRCF   0E,F
001F8:  RRCF   0D,F
001FA:  MOVLW  03
001FC:  ANDWF  0E,F
001FE:  CLRF   F93
00200:  MOVFF  0D,F8A
....................    output_e(resultado>>10); 
00204:  RRCF   0B,W
00206:  MOVWF  0D
00208:  RRCF   0D,F
0020A:  MOVLW  3F
0020C:  ANDWF  0D,F
0020E:  BCF    F96.0
00210:  BCF    F96.1
00212:  BCF    F96.2
00214:  BCF    F96.3
00216:  MOVFF  0D,F8D
....................    } 
0021A:  BRA    0120
....................    }  
.................... }    
.................... void error() 
0021C:  SLEEP 
.................... { 
....................    int i; 
....................    for(i=0;i<5;i++) 
*
0004A:  CLRF   0D
0004C:  MOVF   0D,W
0004E:  SUBLW  04
00050:  BNC   009C
....................    { 
....................    output_a(0b00111111); 
00052:  CLRF   F92
00054:  MOVLW  3F
00056:  MOVWF  F89
....................    output_b(0b00001111); 
00058:  CLRF   F93
0005A:  MOVLW  0F
0005C:  MOVWF  F8A
....................    output_e(0b00001111); 
0005E:  BCF    F96.0
00060:  BCF    F96.1
00062:  BCF    F96.2
00064:  BCF    F96.3
00066:  MOVWF  F8D
....................    delay_ms(retardo); 
00068:  MOVLW  02
0006A:  MOVWF  0E
0006C:  MOVLW  FA
0006E:  MOVWF  0F
00070:  RCALL  0024
00072:  DECFSZ 0E,F
00074:  BRA    006C
....................    output_a(0b00000000); 
00076:  CLRF   F92
00078:  CLRF   F89
....................    output_b(0b00000000); 
0007A:  CLRF   F93
0007C:  CLRF   F8A
....................    output_e(0b00001000); 
0007E:  BCF    F96.0
00080:  BCF    F96.1
00082:  BCF    F96.2
00084:  BCF    F96.3
00086:  MOVLW  08
00088:  MOVWF  F8D
....................    delay_ms(retardo); 
0008A:  MOVLW  02
0008C:  MOVWF  0E
0008E:  MOVLW  FA
00090:  MOVWF  0F
00092:  RCALL  0024
00094:  DECFSZ 0E,F
00096:  BRA    008E
00098:  INCF   0D,F
0009A:  BRA    004C
....................    } 
0009C:  GOTO   01B8 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 0800   INTRC_IO NOFCMEN NOIESO
   Word  2: 1E18   PUT NOBROWNOUT BORV21 NOWDT WDT32768
   Word  3: 0500   CCP2C1 NOPBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
