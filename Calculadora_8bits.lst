CCS PCH C Compiler, Version 5.012, 41559               24-mar-17 18:22

               Filename:   C:\Users\lazaax\Documents\GitHub\Practica\Calculadora_8bits.lst

               ROM used:   566 bytes (1%)
                           Largest free fragment is 64970
               RAM used:   6 (0%) at main() level
                           17 (0%) worst case
               Stack used: 2 locations
               Stack size: 31

*
00000:  GOTO   00FC
.................... #include <18F4620.h> 
.................... ///////////// Standard Header file for the PIC18F4620 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4620 
00004:  MOVF   0D,W
00006:  MULWF  0F
00008:  MOVFF  FF3,01
0000C:  MOVFF  FF4,00
00010:  MULWF  10
00012:  MOVF   FF3,W
00014:  ADDWF  00,F
00016:  MOVF   0E,W
00018:  MULWF  0F
0001A:  MOVF   FF3,W
0001C:  ADDWFC 00,W
0001E:  MOVWF  02
00020:  GOTO   01A8 (RETURN)
*
000B8:  CLRF   01
000BA:  CLRF   02
000BC:  CLRF   00
000BE:  CLRF   03
000C0:  MOVF   10,W
000C2:  BNZ   00C8
000C4:  MOVF   0F,W
000C6:  BZ    00F8
000C8:  MOVLW  10
000CA:  MOVWF  11
000CC:  BCF    FD8.0
000CE:  RLCF   0D,F
000D0:  RLCF   0E,F
000D2:  RLCF   00,F
000D4:  RLCF   03,F
000D6:  MOVF   10,W
000D8:  SUBWF  03,W
000DA:  BNZ   00E0
000DC:  MOVF   0F,W
000DE:  SUBWF  00,W
000E0:  BNC   00F0
000E2:  MOVF   0F,W
000E4:  SUBWF  00,F
000E6:  BTFSS  FD8.0
000E8:  DECF   03,F
000EA:  MOVF   10,W
000EC:  SUBWF  03,F
000EE:  BSF    FD8.0
000F0:  RLCF   01,F
000F2:  RLCF   02,F
000F4:  DECFSZ 11,F
000F6:  BRA    00CC
000F8:  GOTO   01E4 (RETURN)
....................  
.................... #list 
....................  
.................... #fuses INTRC_IO, NOFCMEN, NOIESO, PUT, NOBROWNOUT, NOWDT 
.................... #fuses NOPBADEN, NOMCLR, STVREN, NOLVP, NODEBUG 
.................... #use delay(clock=32000000) 
*
00024:  CLRF   FEA
00026:  MOVLW  0F
00028:  MOVWF  FE9
0002A:  MOVF   FEF,W
0002C:  BZ    0048
0002E:  MOVLW  0A
00030:  MOVWF  01
00032:  CLRF   00
00034:  DECFSZ 00,F
00036:  BRA    0034
00038:  DECFSZ 01,F
0003A:  BRA    0032
0003C:  MOVLW  5F
0003E:  MOVWF  00
00040:  DECFSZ 00,F
00042:  BRA    0040
00044:  DECFSZ FEF,F
00046:  BRA    002E
00048:  RETURN 0
.................... #use standard_io(b) 
.................... #use standard_io(a) 
.................... #define retardo 500 
....................  
....................  
.................... void error(); 
....................  
.................... void main (void){ 
*
000FC:  CLRF   FF8
000FE:  BCF    FD0.7
00100:  MOVLW  70
00102:  MOVWF  FD3
00104:  MOVLW  40
00106:  MOVWF  F9B
00108:  MOVF   FD3,W
0010A:  MOVF   FC1,W
0010C:  ANDLW  C0
0010E:  IORLW  0F
00110:  MOVWF  FC1
00112:  MOVLW  07
00114:  MOVWF  FB4
....................    SETUP_ADC_PORTS(NO_ANALOGS); 
00116:  MOVF   FC1,W
00118:  ANDLW  C0
0011A:  IORLW  0F
0011C:  MOVWF  FC1
....................    setup_oscillator(OSC_32MHZ); 
0011E:  MOVLW  70
00120:  MOVWF  FD3
00122:  MOVLW  40
00124:  MOVWF  F9B
00126:  MOVF   FD3,W
....................    int16 resultado=0; 
....................    int1 valError=0; 
....................    int16 operando1=0,operando2=0; 
....................    int8 operacion=0; 
00128:  CLRF   06
0012A:  CLRF   05
0012C:  BCF    07.0
0012E:  CLRF   09
00130:  CLRF   08
00132:  CLRF   0B
00134:  CLRF   0A
00136:  CLRF   0C
....................    while(True){ 
....................    valError=0; 
00138:  BCF    07.0
....................    operando1=input_c(); 
0013A:  SETF   F94
0013C:  CLRF   09
0013E:  MOVFF  F82,08
....................    operando2=input_d(); 
00142:  SETF   F95
00144:  CLRF   0B
00146:  MOVFF  F83,0A
....................    operacion=input_b(); 
0014A:  SETF   F93
0014C:  MOVFF  F81,0C
....................    if(input(PIN_B4) == 1 || operacion==1){ 
00150:  BSF    F93.4
00152:  BTFSC  F81.4
00154:  BRA    015A
00156:  DECFSZ 0C,W
00158:  BRA    016C
....................    resultado = operando1 + operando2; 
0015A:  MOVF   0A,W
0015C:  ADDWF  08,W
0015E:  MOVWF  05
00160:  MOVF   0B,W
00162:  ADDWFC 09,W
00164:  MOVWF  06
....................    operacion=1; 
00166:  MOVLW  01
00168:  MOVWF  0C
....................    } 
0016A:  BRA    01EC
....................    else if(input(PIN_B5) == 1 || operacion==2) 
0016C:  BSF    F93.5
0016E:  BTFSC  F81.5
00170:  BRA    0178
00172:  MOVF   0C,W
00174:  SUBLW  02
00176:  BNZ   018A
....................    { 
....................    resultado = operando1 - operando2; 
00178:  MOVF   0A,W
0017A:  SUBWF  08,W
0017C:  MOVWF  05
0017E:  MOVF   0B,W
00180:  SUBWFB 09,W
00182:  MOVWF  06
....................    operacion=2; 
00184:  MOVLW  02
00186:  MOVWF  0C
....................    } 
00188:  BRA    01EC
....................    else if(input(PIN_B6) == 1 || operacion==3) 
0018A:  BSF    F93.6
0018C:  BTFSC  F81.6
0018E:  BRA    0196
00190:  MOVF   0C,W
00192:  SUBLW  03
00194:  BNZ   01B6
....................    { 
....................    resultado = operando1 * operando2; 
00196:  MOVFF  09,0E
0019A:  MOVFF  08,0D
0019E:  MOVFF  0B,10
001A2:  MOVFF  0A,0F
001A6:  BRA    0004
001A8:  MOVFF  02,06
001AC:  MOVFF  01,05
....................    operacion=3; 
001B0:  MOVLW  03
001B2:  MOVWF  0C
....................    } 
001B4:  BRA    01EC
....................    else if(input(PIN_B7) == 1|| operacion==4) 
001B6:  BSF    F93.7
001B8:  BTFSC  F81.7
001BA:  BRA    01C2
001BC:  MOVF   0C,W
001BE:  SUBLW  04
001C0:  BNZ   01EC
....................    { 
....................    operacion=4; 
001C2:  MOVLW  04
001C4:  MOVWF  0C
....................    if(input_d()==0) 
001C6:  SETF   F95
001C8:  MOVF   F83,F
001CA:  BNZ   01D2
....................    { 
....................    valError=1; 
001CC:  BSF    07.0
....................    error(); 
001CE:  BRA    004A
....................    }else 
001D0:  BRA    01EC
....................    resultado = operando1 / operando2; 
001D2:  MOVFF  09,0E
001D6:  MOVFF  08,0D
001DA:  MOVFF  0B,10
001DE:  MOVFF  0A,0F
001E2:  BRA    00B8
001E4:  MOVFF  02,06
001E8:  MOVFF  01,05
....................    } 
....................    if(valError==0) 
001EC:  BTFSC  07.0
001EE:  BRA    0232
....................    { 
....................    output_a(resultado); 
001F0:  CLRF   F92
001F2:  MOVFF  05,F89
....................    output_b(resultado>>6); 
001F6:  RRCF   06,W
001F8:  MOVWF  0E
001FA:  RRCF   05,W
001FC:  MOVWF  0D
001FE:  RRCF   0E,F
00200:  RRCF   0D,F
00202:  RRCF   0E,F
00204:  RRCF   0D,F
00206:  RRCF   0E,F
00208:  RRCF   0D,F
0020A:  RRCF   0E,F
0020C:  RRCF   0D,F
0020E:  RRCF   0E,F
00210:  RRCF   0D,F
00212:  MOVLW  03
00214:  ANDWF  0E,F
00216:  CLRF   F93
00218:  MOVFF  0D,F8A
....................    output_e(resultado>>10); 
0021C:  RRCF   06,W
0021E:  MOVWF  0D
00220:  RRCF   0D,F
00222:  MOVLW  3F
00224:  ANDWF  0D,F
00226:  BCF    F96.0
00228:  BCF    F96.1
0022A:  BCF    F96.2
0022C:  BCF    F96.3
0022E:  MOVFF  0D,F8D
....................    } 
00232:  BRA    0138
....................    }  
.................... }    
.................... void error() 
00234:  SLEEP 
.................... { 
....................    int i; 
....................    for(i=0;i<5;i++) 
*
0004A:  CLRF   0D
0004C:  MOVF   0D,W
0004E:  SUBLW  04
00050:  BNC   00B4
....................    { 
....................    output_a(0b00111111); 
00052:  CLRF   F92
00054:  MOVLW  3F
00056:  MOVWF  F89
....................    output_bit( PIN_B0, 1); 
00058:  BSF    F8A.0
0005A:  BCF    F93.0
....................    output_bit( PIN_B1, 1); 
0005C:  BSF    F8A.1
0005E:  BCF    F93.1
....................    output_bit( PIN_B2, 1); 
00060:  BSF    F8A.2
00062:  BCF    F93.2
....................    output_bit( PIN_B3, 1); 
00064:  BSF    F8A.3
00066:  BCF    F93.3
....................    output_bit( PIN_E0, 1); 
00068:  BSF    F8D.0
0006A:  BCF    F96.0
....................    output_bit( PIN_E1, 1); 
0006C:  BSF    F8D.1
0006E:  BCF    F96.1
....................    output_bit( PIN_E2, 1); 
00070:  BSF    F8D.2
00072:  BCF    F96.2
....................    delay_ms(retardo); 
00074:  MOVLW  02
00076:  MOVWF  0E
00078:  MOVLW  FA
0007A:  MOVWF  0F
0007C:  RCALL  0024
0007E:  DECFSZ 0E,F
00080:  BRA    0078
....................    output_a(0b00000000); 
00082:  CLRF   F92
00084:  CLRF   F89
....................    output_bit( PIN_B0, 0); 
00086:  BCF    F8A.0
00088:  BCF    F93.0
....................    output_bit( PIN_B1, 0); 
0008A:  BCF    F8A.1
0008C:  BCF    F93.1
....................    output_bit( PIN_B2, 0); 
0008E:  BCF    F8A.2
00090:  BCF    F93.2
....................    output_bit( PIN_B3, 0); 
00092:  BCF    F8A.3
00094:  BCF    F93.3
....................    output_bit( PIN_E0, 0); 
00096:  BCF    F8D.0
00098:  BCF    F96.0
....................    output_bit( PIN_E1, 0); 
0009A:  BCF    F8D.1
0009C:  BCF    F96.1
....................    output_bit( PIN_E2, 0); 
0009E:  BCF    F8D.2
000A0:  BCF    F96.2
....................    delay_ms(retardo); 
000A2:  MOVLW  02
000A4:  MOVWF  0E
000A6:  MOVLW  FA
000A8:  MOVWF  0F
000AA:  RCALL  0024
000AC:  DECFSZ 0E,F
000AE:  BRA    00A6
000B0:  INCF   0D,F
000B2:  BRA    004C
....................    } 
000B4:  GOTO   01D0 (RETURN)
.................... } 
....................  

Configuration Fuses:
   Word  1: 0800   INTRC_IO NOFCMEN NOIESO
   Word  2: 1E18   PUT NOBROWNOUT BORV21 NOWDT WDT32768
   Word  3: 0500   CCP2C1 NOPBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
